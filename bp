#! /usr/bin/env ruby
# frozen_string-literal: true

require 'pp'
require 'date'
require 'optparse'
require 'strscan'

module Tarsnap
  class Archive
    attr_reader :name, :date

    def initialize(raw_name)
      @raw_name = raw_name
      s = StringScanner.new(raw_name)
      @date = Date.parse(s.scan(/\d{4}-\d{2}-\d{2}/))
      s.skip(/_/)
      @name = s.scan(/.+\z/)
    end

    def drop_cmd
      %W[tarsnap -d -f #{@raw_name}]
    end
  end

  class Store
    def initialize()
      @archives =
        IO.popen(%w(tarsnap --list-archives))
        .readlines
        .map(&:chomp)
        .map(&Archive.method(:new))
    end

    def print
      longest_name = @archives.map(&:name).max_by(&:length)
      @archives.group_by(&:name).to_a.sort_by { |_, archives|
        archives.map(&:date).max
      }.each do |name, archives|
        ver_str = archives.map(&:date).sort.map { |d| d.strftime('%Y-%m-%d') }.join(', ')
        puts "#{name.ljust(longest_name.length)}\t#{ver_str}"
      end
    end

    def self.add(options)
      date_string = Date.today().strftime('%Y-%m-%d')

      options[:files]
        .map(&File.method(:expand_path))
        .map { |file|
          unless File.file?(file) || File.directory?(file)
            abort "'#{file}' is not a regular file or directory"
          end

          basename = File.basename(file)
          clean_basename = basename.gsub('-', '_')

          [
            File.dirname(file),
            [
              'tarsnap',
              '-c',
              '-f',
              "#{date_string}_#{clean_basename}",
              basename,
            ],
          ]
        }.each do |dir, cmd|
          Dir.chdir dir do
            if options[:dry_run]
              p [dir, cmd]
            else
              system(*cmd)
            end
          end
        end

      new().drop_old(options) if options[:drop_old]
    end

    def drop_old(options)
      names_to_drop = options[:files].map { |f| File.basename(f).gsub('-', '_') }

      @archives
        .filter { |archive| names_to_drop.empty? || names_to_drop.include?(archive.name) }
        .group_by(&:name)
        .map { |name, archives|
          (*old_archives, latest) = archives.sort_by(&:date)
          [name, old_archives, latest]
        }.reject { |_name, old_archives, _latest| old_archives.empty? }
        .each do |name, old_archives, latest|
          versions_to_drop =
            old_archives
            .map(&:date)
            .map { |d| d.strftime('%Y-%m-%d') }
            .join(', ')

          puts "Archive '#{name}'"
          puts "\tversions that are going to be removed: #{versions_to_drop}"
          puts "\tremaining version: #{latest.date.strftime('%Y-%m-%d')}"

          old_archives.map(&:drop_cmd).each do |cmd|
            if options[:dry_run]
              p cmd
            else
              system(*cmd)
            end
          end
        end
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  ARGV << '--help' if ARGV.empty?

  options = {
    dry_run: false,
    drop_old: false,
    files: [],
  }

  OptionParser.new { |op|
    name = File.basename($PROGRAM_NAME)

    op.banner = "Usage:\t#{name} [options] FILE..."

    op.on '-l', '--list', 'List backups' do
      Tarsnap::Store.new().print
      exit 0
    end

    op.on '--versions BACKUP' do |backup|
      system "tarsnap --list-archives | grep #{backup} | sort"
      exit 0
    end

    op.on '--dry-run' do
      options[:dry_run] = true
    end

    op.on '--drop-old-versions', 'Remove old archive versions' do
      options[:drop_old] = true
    end

    op.on '-h', '--help', 'Display this message' do
      puts op
      exit 0
    end
  }.parse!(ARGV)

  options[:files] = ARGV

  if options[:files].empty? && options[:drop_old]
    Tarsnap::Store.new().drop_old(options)
  elsif options[:files].any?
    Tarsnap::Store.add(options)
  end
end
